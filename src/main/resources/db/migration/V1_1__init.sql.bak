CREATE TABLE T_LISTING
(
  ID BIGINT PRIMARY KEY NOT NULL,
  PROPERTY_ID BIGINT NOT NULL, /* foreign key to M_PROPERTY table to identify the premise of the listing */
  AGENT_ID BIGINT NOT NULL, /* foreign key to the M_AGENT table to identify the agent who posts this listing */
  DESCRIPTION VARCHAR(500),
  LISTING_PRICE DECIMAL(20, 0) NOT NULL,
  LISTING_CURRENCY VARCHAR(3) NOT NULL,
  EFFECTIVE_DATE_START DATE NOT NULL, /* start date where listing is posted */
  EFFECTIVE_DATE_END DATE, /* if the list is closed, end date of the listing */
  LISTING_TYPE VARCHAR(20) NOT NULL, /* Rental, sale or both */
  OWNER_TYPE VARCHAR(20),  /* Individual, company or sponsor */
  SOURCE VARCHAR(100), /* describe where the listing comes from like post directly or quoted from other site */
  STATUS VARCHAR(20), /* listing status: open, success (sold), fail (unsold), inactive (deleted) for the last two scenarios, effective_date_end is required */
  VERSION BIGINT NOT NULL,
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);

/* leave a history record each time T_LISTING's price is adjusted, useful for analysis purpose */
CREATE TABLE T_LISTING_PRICE_ADJUST_HISTORY
(
  ID BIGINT PRIMARY KEY NOT NULL,
  LISTING_ID BIGINT NOT NULL, /* foreign key to T_LISTING */
  LISTING_PRICE DECIMAL(20, 0) NOT NULL,
  LISTING_CURRENCY VARCHAR(3) NOT NULL,
  EFFECTIVE_DATE_START DATE NOT NULL,
  EFFECTIVE_DATE_END DATE NOT NULL
);


CREATE TABLE M_AGENT (
  ID BIGINT PRIMARY KEY NOT NULL,
  AGENCY_TYPE VARCHAR(20), /* By a broker firm or a person */
  VERSION BIGINT NOT NULL,
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);

/* additional information for personal agent */
CREATE TABLE M_AGENT_PERSONAL
(
  ID BIGINT PRIMARY KEY NOT NULL, /* same key as M_AGENT */
  FIRST_NAME VARCHAR(30) NOT NULL,
  LAST_NAME VARCHAR(30) NOT NULL,
  MIDDLE_NAME VARCHAR(30),
  PHONE VARCHAR(12),
  AGENT_COMPANY_ID BIGINT NOT NULL
);

CREATE TABLE M_AGENT_COMPANY
(
  ID BIGINT PRIMARY KEY NOT NULL, /* same key as M_AGENT_COMPANY */
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  ADDRESS_ID BIGINT NOT NULL /* foreign key to M_ADDRESS_COMPONENT */
);


CREATE TABLE M_ADDRESS_COMPONENT
(
   ID BIGINT PRIMARY KEY NOT NULL,
   ADDRESS_SCHEMA VARCHAR(500),   /* handle different address format in different region, attribute name, length etc, can be used to validate address */
   ADDRESS_DETAILS VARCHAR(500) NOT NULL, /* json format address details eg: {"address_1", "address_2", "address_3"} */
   REGION VARCHAR(20) NOT NULL,
   POSTAL_CODE VARCHAR(30),
   LOCATION_ID BIGINT,
   FULL_LOCATION_PATH VARCHAR(100) /* list of locations from root separated by ',' */
);


CREATE TABLE M_PROPERTY
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  BUILDING_ID BIGINT NOT NULL,
  BEDROOM_NUM INT NOT NULL,
  BATHROOM_NUM INT NOT NULL,
  TOTAL_ROOM_NUM INT NOT NULL,
  SIZE VARCHAR(100) NOT NULL,
  TAGS VARCHAR(500), /* a list of keywords used to search properties */
  STATUS VARCHAR(20) NOT NULL, /* active/deleted */
  VERSION BIGINT NOT NULL,
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);


CREATE TABLE M_BUILDING
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  ADDRESS_ID BIGINT NOT NULL, /* foreign key to M_ADDRESS_COMPONENT table */
  LATITUDE DECIMAL(8, 5), /* useful when calculating nearby and distances */
  LONGITUDE DECIMAL(8, 5), /* useful when calculating nearby and distances */
  BUILDING_TYPE VARCHAR(20) NOT NULL, /* Single house, townhouse, apartment */
  TOTAL_UNITS INT NOT NULL,
  TOTAL_STORIES INT NOT NULL,
  TOTAL_FAMILY_NUM INT NOT NULL, /* Only useful when not apartment */
  BUILT_YEAR INT NOT NULL,
  STATUS VARCHAR(20) NOT NULL, /* active/deleted */
  VERSION BIGINT NOT NULL,
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);

/* store location hierarchy country/city/area for search purpose */
CREATE TABLE M_LOCATION_HIERARCHY
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100),
  DESCRIPTION VARCHAR(500),
  TYPE VARCHAR(20) NOT NULL,  /* country/city/area/neighborhood */
  PARENT_ID BIGINT NOT NULL, /* parent location id */
  DATA VARCHAR(500), /* additional location data in json format */
  VERSION BIGINT NOT NULL,
  STATUS VARCHAR(20), /* active/deleted */
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);

/* Static, a fixed list of amenities can be attached to property or building */
CREATE TABLE M_AMENITY
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  TYPE VARCHAR(20) NOT NULL, /* Building or property */
  CATEGORIES VARCHAR(500), /* categories that amenity belongs to, such as HIGHLIGHTS, CO-OP RULES, BUILDING, LISTING etc */
  VERSION BIGINT NOT NULL,
  STATUS VARCHAR(20), /* active/deleted */
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);

CREATE TABLE M_PUBLIC_LOCATION
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  ADDRESS_ID BIGINT NOT NULL, /* foreign key to M_ADDRESS_COMPONENT */
  TYPE VARCHAR(20) NOT NULL,
  LATITUDE DECIMAL(8, 5), /* Decimal degrees */
  LONGITUDE DECIMAL(8, 5), /* Decimal degrees */
  VERSION BIGINT NOT NULL,
  STATUS VARCHAR(20), /* active/deleted */
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);



CREATE TABLE M_IMAGE_RESOURCE
(
  ID BIGINT PRIMARY KEY NOT NULL,
  NAME VARCHAR(100) NOT NULL,
  DESCRIPTION VARCHAR(500),
  LABEL VARCHAR(100),  /* keyword of the image like bedroom, kitchen, front view/ lobby etc */
  BELONG_TO VARCHAR(20) NOT NULL, /* the image can belong to property/building/amenity etc */
  REFERENCE_ID BIGINT NOT NULL, /* associated entity based on BELONG_TO type */
  IMAGE_FULL_PATH VARCHAR(500) NOT NULL,
  VERSION BIGINT NOT NULL,
  CREATED_ON TIMESTAMP NOT NULL,
  CREATED_BY VARCHAR(50) NOT NULL,
  LAST_UPDATED_ON TIMESTAMP NOT NULL,
  LAST_UPDATED_BY VARCHAR(50) NOT NULL
);
